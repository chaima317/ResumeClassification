ALTER SESSION SET NLS_DATE_FORMAT = 'DD/MM/YYYY';
SET SERVEROUTPUT ON;

-- Suppression des tables
DROP TABLE CV CASCADE CONSTRAINTS;
DROP TABLE ADRESSES CASCADE CONSTRAINTS;
DROP TABLE CANDIDATS CASCADE CONSTRAINTS;
DROP TABLE PERMIS CASCADE CONSTRAINTS;
DROP TABLE OBTENTIONPERMIS CASCADE CONSTRAINTS;
DROP TABLE CENTREINTERET CASCADE CONSTRAINTS;
DROP TABLE RELATION_CENTINT_CAN CASCADE CONSTRAINTS;
DROP TABLE SITES_RESEAUX CASCADE CONSTRAINTS;
DROP TABLE DIPLOMES CASCADE CONSTRAINTS;
DROP TABLE OBTENTIONDIPLOME CASCADE CONSTRAINTS;
DROP TABLE COMPETENCES CASCADE CONSTRAINTS;
DROP TABLE CATEGORIE_CPT CASCADE CONSTRAINTS;
DROP TABLE RELATION_COMP_CAN CASCADE CONSTRAINTS;
DROP TABLE LANGUES CASCADE CONSTRAINTS;
DROP TABLE RELATION_LANG_CAN CASCADE CONSTRAINTS;
DROP TABLE ETABLISSEMENTSCOLAIRES CASCADE CONSTRAINTS;
DROP TABLE ENTREPRISES CASCADE CONSTRAINTS;
DROP TABLE FORMATIONS CASCADE CONSTRAINTS;
DROP TABLE EXPERIENCES CASCADE CONSTRAINTS;
DROP TABLE SUIT_FORMATIONS CASCADE CONSTRAINTS;



-- Suppression des Méta-tables
DROP TABLE META_CV CASCADE CONSTRAINTS;
DROP TABLE META_CANDIDATS CASCADE CONSTRAINTS;
DROP TABLE META_ADRESSES CASCADE CONSTRAINTS;
DROP TABLE META_PERMIS CASCADE CONSTRAINTS;
DROP TABLE META_CENTREINTERET CASCADE CONSTRAINTS;
DROP TABLE META_SITES_RESEAUX CASCADE CONSTRAINTS;
DROP TABLE META_DIPLOMES CASCADE CONSTRAINTS;
DROP TABLE META_COMPETENCES CASCADE CONSTRAINTS;
DROP TABLE META_CATEGORIE_CPT CASCADE CONSTRAINTS;
DROP TABLE META_LANGUES CASCADE CONSTRAINTS;
DROP TABLE META_ETABLISSEMENTSCOLAIRES CASCADE CONSTRAINTS;
DROP TABLE META_ENTREPRISES CASCADE CONSTRAINTS;
DROP TABLE META_FORMATIONS CASCADE CONSTRAINTS;

-- Suppression des séquences

DROP SEQUENCE seq_cv;
DROP SEQUENCE seq_adresse;
DROP SEQUENCE seq_candidat;
DROP SEQUENCE seq_siteres;
DROP SEQUENCE seq_diplome;
DROP SEQUENCE seq_etasco;
DROP SEQUENCE seq_entreprise;
DROP SEQUENCE seq_formation;


-- Création des séquences (pour la génération d'un numéro unique)

create sequence seq_cv start with 1 increment by 1 nomaxvalue;
create sequence seq_adresse start with 1 increment by 1 nomaxvalue;
create sequence seq_candidat start with 1 increment by 1 nomaxvalue;
create sequence seq_siteres start with 1 increment by 1 nomaxvalue;
create sequence seq_diplome start with 1 increment by 1 nomaxvalue;
create sequence seq_etasco start with 1 increment by 1 nomaxvalue;
create sequence seq_entreprise start with 1 increment by 1 nomaxvalue;
create sequence seq_formation start with 1 increment by 1 nomaxvalue;


-- Tables


CREATE TABLE ADRESSES
(
	IDADR VARCHAR2(150), 
	NUMADR VARCHAR2(150),
	LOCALITEADR VARCHAR2(150),
	NOMRUEADR VARCHAR2(100),
	CPADR VARCHAR2(150),
	VILLEADR VARCHAR2(150),
	PAYSADR VARCHAR2(150),
	CONTINENTADR VARCHAR2(150),
	CONSTRAINT PK_ADRESSES PRIMARY KEY(IDADR)
);

CREATE TABLE CANDIDATS
(
	IDCAN VARCHAR2(150), 
	IDADR VARCHAR2(150),
	NOMCAN VARCHAR2(150),
	PRENOMCAN VARCHAR2(150),
	SEXE CHAR(1),
	AGE NUMBER(3),
	DATENAISSANCE DATE,
	MAILCAN VARCHAR2(150),
	NATIONALITE VARCHAR2(150),
	TELCAN VARCHAR2(150),
	CONSTRAINT PK_CANDIDATS PRIMARY KEY(IDCAN),
	CONSTRAINT FK_CAN_ADR_IDADR FOREIGN KEY(IDADR) REFERENCES ADRESSES(IDADR),
	CONSTRAINT CK_CAN_SEXE CHECK(SEXE IN ('M','F')),
	CONSTRAINT CK_CAN_AGE CHECK(AGE >= 0)
);

CREATE TABLE CV
(
	IDCV VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	NOMCV VARCHAR2(150),
	DESCRIPTIFCV VARCHAR2(150),
	POSTERECHERCHER VARCHAR2(150),
	TYPEPOSTE VARCHAR2(150),
	DISPONIBILITE DATE,
	ADMIS VARCHAR2(150),
	DATETRANSMISSION DATE,
	PHOTO VARCHAR2(150),
	CONSTRAINT PK_CV PRIMARY KEY(IDCV),
	CONSTRAINT CK_CV_ADMIS CHECK(ADMIS IN ('ACCEPTE','REFUSE','INCONNU')),
	CONSTRAINT FK_CV_CANDIDAT_IDCAN	FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);

CREATE TABLE PERMIS
(
	NOMPERM VARCHAR2(150),
	CONSTRAINT PK_PERMIS PRIMARY KEY(NOMPERM),
	CONSTRAINT CK_PERMIS_NOMPERM CHECK(NOMPERM IN ('AM','BSR','A','A1','A2','B','B1','B2','BE','BVA','C','C1','CE','C1E','D','D1','D2','DE','DE1'))
);

CREATE TABLE OBTENTIONPERMIS
(
	NOMPERM VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	DATEOBTENTION DATE,
	CONSTRAINT PK_OBTPERM PRIMARY KEY(NOMPERM,IDCAN),
	CONSTRAINT FK_OBTPERM_PERM_NOMPERM FOREIGN KEY(NOMPERM) REFERENCES PERMIS(NOMPERM),
	CONSTRAINT FK_OBTPERM_CAN_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);

CREATE TABLE CENTREINTERET
(
	NOMCTRINT VARCHAR2(150),
	CONSTRAINT PK_CENTREINTERER PRIMARY KEY(NOMCTRINT)
);

CREATE TABLE RELATION_CENTINT_CAN
(
	NOMCTRINT VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	CONSTRAINT PK_RELCICAN PRIMARY KEY(NOMCTRINT,IDCAN),
	CONSTRAINT FK_RELCICAN_CINT_NOMCTRINT FOREIGN KEY(NOMCTRINT) REFERENCES CENTREINTERET(NOMCTRINT),
	CONSTRAINT FK_RELCICAN_CAN_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);

CREATE TABLE SITES_RESEAUX
(
	IDSITERES VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	LIEN VARCHAR2(150),
	CONSTRAINT PK_SITES_RESEAUX PRIMARY KEY(IDSITERES),
	CONSTRAINT FK_SITERESEAU_CANDIDAT_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);

CREATE TABLE DIPLOMES
(
	IDDIPLOME VARCHAR2(150), 
	NOMDIMPLOME VARCHAR2(150),
	DESCRIPTIFDIPLOME VARCHAR2(150),
	CONSTRAINT PK_DIPLOMES PRIMARY KEY(IDDIPLOME)
);

CREATE TABLE OBTENTIONDIPLOME
(
	IDDIPLOME VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	MENTION VARCHAR2(150),
	DATEOBTENTION DATE,
	CONSTRAINT PK_OBTDIPL PRIMARY KEY(IDDIPLOME,IDCAN),
	CONSTRAINT FK_OBTDIPL_DIPLOME_IDDIP FOREIGN KEY(IDDIPLOME) REFERENCES DIPLOMES(IDDIPLOME),
	CONSTRAINT FK_OBTDIPL_CAN_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);

CREATE TABLE CATEGORIE_CPT
(
	NOMCATEGORIE VARCHAR2(150),
	CONSTRAINT PK_CAT_CPT PRIMARY KEY(NOMCATEGORIE)
);


CREATE TABLE COMPETENCES
(
	NOMCPT VARCHAR2(150),
	NOMCATEGORIE VARCHAR2(150),
	CONSTRAINT PK_COMPETENCES PRIMARY KEY(NOMCPT),
	CONSTRAINT FK_CPT_CATCPT_NOMCAT FOREIGN KEY(NOMCATEGORIE) REFERENCES CATEGORIE_CPT(NOMCATEGORIE)
);

CREATE TABLE RELATION_COMP_CAN
(
	NOMCPT VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	CONSTRAINT PK_RELCOMPCAN PRIMARY KEY(NOMCPT,IDCAN),
	CONSTRAINT FK_RELCOMPCAN_NOMCPT FOREIGN KEY(NOMCPT) REFERENCES COMPETENCES(NOMCPT),
	CONSTRAINT FK_RELCOMPCAN_CAN_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);

CREATE TABLE LANGUES
(
	NOMLANGUE VARCHAR2(150),
	CONSTRAINT PK_LANGUES PRIMARY KEY(NOMLANGUE)
);

CREATE TABLE RELATION_LANG_CAN
(
	NOMLANGUE VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	NIVEAU VARCHAR2(150),
	CONSTRAINT PK_RELLANGCAN PRIMARY KEY(NOMLANGUE,IDCAN),
	CONSTRAINT FK_RELLANGCAN_LANG_NOMLANGUE FOREIGN KEY(NOMLANGUE) REFERENCES LANGUES(NOMLANGUE),
	CONSTRAINT FK_RELLANGCAN_CAN_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);

CREATE TABLE ETABLISSEMENTSCOLAIRES
(
	IDETASCO VARCHAR2(150), 
	IDADR VARCHAR2(150),
	NOMETASCO VARCHAR2(150),
	TELETASCO VARCHAR2(150),
	CONSTRAINT PK_ETASCO PRIMARY KEY(IDETASCO),
	CONSTRAINT FK_ETBSCO_ADR_IDADR FOREIGN KEY(IDADR) REFERENCES ADRESSES(IDADR)
);

CREATE TABLE ENTREPRISES
(
	IDENT VARCHAR2(150), 
	IDADR VARCHAR2(150),
	NOMENT VARCHAR2(150),
	MAILENT VARCHAR2(150),
	TELENT VARCHAR2(150),
	CONSTRAINT PK_ENTREPRISES PRIMARY KEY(IDENT),
	CONSTRAINT FK_ENT_ADR_IDADR FOREIGN KEY(IDADR) REFERENCES ADRESSES(IDADR)
);

CREATE TABLE FORMATIONS
(
	IDFORM VARCHAR2(150),
	IDETASCO VARCHAR2(150),
	NIVEAU VARCHAR2(150), 
	SPECIALITE VARCHAR2(150), 
	CONSTRAINT PK_FORMATIONS PRIMARY KEY(IDFORM),
	CONSTRAINT FK_FORM_ETASCO_IDETASCO FOREIGN KEY(IDETASCO) REFERENCES ETABLISSEMENTSCOLAIRES(IDETASCO)
);

CREATE TABLE EXPERIENCES
(
	IDENT VARCHAR2(150),
	IDCAN VARCHAR2(150),
	POSTE VARCHAR2(2000),
	TYPECONTRAT VARCHAR2(150),
	DESCRIPTIFEXP VARCHAR2(2000),
	DATEDEBUTEXP DATE,
	DATEFINEXP DATE,
	CONSTRAINT PK_EXPERIENCE PRIMARY KEY(IDENT,IDCAN),
	CONSTRAINT FK_EXP_ENT_IDENT FOREIGN KEY(IDENT) REFERENCES ENTREPRISES(IDENT),
	CONSTRAINT FK_EXP_CAN_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);

CREATE TABLE SUIT_FORMATIONS
(
	IDFORM VARCHAR2(150),
	IDCAN VARCHAR2(150),
	DATEDEBUTFORM DATE,
	DATEFINFORM DATE,
	CONSTRAINT PK_SUIT_FORM PRIMARY KEY(IDFORM,IDCAN),
	CONSTRAINT FK_FORMATIONS_FORM_IDFORM FOREIGN KEY(IDFORM) REFERENCES FORMATIONS(IDFORM),
	CONSTRAINT FK_FORMATIONS_CAN_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);


-- Méta-tables

CREATE TABLE META_CV
(
	CONST_IDCV VARCHAR2(2000) DEFAULT NULL,
	CONST_IDCAN VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMCV VARCHAR2(2000) DEFAULT NULL,
	CONST_DESCRIPTIFCV VARCHAR2(2000) DEFAULT NULL,
	CONST_POSTERECHERCHER VARCHAR2(2000) DEFAULT NULL,
	CONST_TYPEPOSTE VARCHAR2(2000) DEFAULT NULL,
	CONST_DISPONIBILITE VARCHAR2(2000) DEFAULT NULL,
	CONST_ADMIS VARCHAR2(2000) DEFAULT NULL,
	CONST_DATETRANSMISSION VARCHAR2(2000) DEFAULT NULL,
	CONST_PHOTO VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_ADRESSES
(
	CONST_IDADR VARCHAR2(2000) DEFAULT NULL,
	CONST_NUMADR VARCHAR2(2000) DEFAULT NULL,
	CONST_LOCALITEADR VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMRUEADR VARCHAR2(2000) DEFAULT NULL,
	CONST_CPADR VARCHAR2(2000) DEFAULT NULL,
	CONST_VILLEADR VARCHAR2(2000) DEFAULT NULL,
	CONST_PAYSADR VARCHAR2(2000) DEFAULT NULL,
	CONST_CONTINENTADR VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_CANDIDATS
(
	CONST_IDCAN VARCHAR2(2000) DEFAULT NULL, 
	CONST_IDADR VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMCAN VARCHAR2(2000) DEFAULT NULL,
	CONST_PRENOMCAN VARCHAR2(2000) DEFAULT NULL,
	CONST_SEXE VARCHAR2(2000) DEFAULT NULL,
	CONST_AGE VARCHAR2(2000) DEFAULT NULL,
	CONST_DATENAISSANCE VARCHAR2(2000) DEFAULT NULL,
	CONST_MAILCAN VARCHAR2(2000) DEFAULT NULL,
	CONST_NATIONALITE VARCHAR2(2000) DEFAULT NULL,
	CONST_TELCAN VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_PERMIS
(
	CONST_NOMPERM VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_CENTREINTERET
(
	CONST_NOMCTRINT VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_SITES_RESEAUX
(
	CONST_IDSITERES VARCHAR2(2000) DEFAULT NULL,
	CONST_IDCAN VARCHAR2(2000) DEFAULT NULL,
	CONST_LIEN VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_DIPLOMES
(
	CONST_IDDIPLOME VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMDIMPLOME VARCHAR2(2000) DEFAULT NULL,
	CONST_DESCRIPTIFDIPLOME VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_COMPETENCES
(
	CONST_NOMCPT VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMCATEGORIE VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_CATEGORIE_CPT
(
	CONST_NOMCATEGORIE VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_LANGUES
(
	CONST_NOMLANGUE VARCHAR2(2000)  DEFAULT NULL
);

CREATE TABLE META_ETABLISSEMENTSCOLAIRES
(
	CONST_IDETASCO VARCHAR2(2000) DEFAULT NULL, 
	CONST_IDADR VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMETASCO VARCHAR2(2000) DEFAULT NULL,
	CONST_TELETASCO VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_ENTREPRISES
(
	CONST_IDENT VARCHAR2(2000) DEFAULT NULL, 
	CONST_IDADR VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMENT VARCHAR2(2000) DEFAULT NULL,
	CONST_MAILENT VARCHAR2(2000) DEFAULT NULL,
	CONST_TELENT VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_FORMATIONS
(
	CONST_IDFORM VARCHAR2(2000) DEFAULT NULL, 
	CONST_IDETASCO VARCHAR2(2000) DEFAULT NULL,
	CONST_NIVEAU VARCHAR2(2000) DEFAULT NULL,
	CONST_SPECIALITE VARCHAR2(2000) DEFAULT NULL
);


INSERT INTO META_ADRESSES  VALUES(	'^[0-9]+$', 
									'^([0-9]{1,5}( BIS| TER)?)|NULL$',
									'^(RUE|BOULEVARD|AVENUE|QUAI|IMPASSE|PONT|PLACE|SQUARE|ALLEE|ALLEES|VOIE|MONTEE|ESPLANADE|ROUTE|VOIRIE|CITE|CHEMIN|PARVIS)|NULL$',
									'^([A-Z0-9]+[(-| )?[A-Z0-9]+]*)|NULL$',
									'^([0-9]{5})|NULL$',
									'^[A-Z]+[(-| )?[A-Z]+]*$',
									'^[A-Z]+[(-| )?[A-Z]+]*$',
									'^[A-Z]+[(-| )?[A-Z]+]*$');


INSERT INTO META_CANDIDATS VALUES(	'^[0-9]+$',
									'^([0-9]+)|NULL$',
									'^[A-Z]+[(-| )?[A-Z]+]*$',
									'^[A-Z][a-zéïàèîôû]+((\-| )[A-Z][a-zéïàèîôû]+)?$',
									'^(M|F)|NULL$',
									'^([0-9]{1,3})|NULL$',
									NULL,
									'^([A-Za-z]+[A-Za-z0-9--\._]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4})|NULL$',
									'^([A-Z]+)|NULL$',
									'^((\+)?[0-9]+)|NULL$');
									
									
INSERT INTO META_ETABLISSEMENTSCOLAIRES VALUES(	
									'^[0-9]+$',
									'^([0-9]+)|NULL$',
									'^([A-Z]+[(-| )?[A-Z]+]*)|NULL$',
									'^((\+)?[0-9]+)|NULL$');
	

INSERT INTO META_ENTREPRISES VALUES(
									'^[0-9]+$',
									'^([0-9]+)|NULL$',
									'^([A-Z]+[(-| )?[A-Z]+]*)|NULL$',
									'^([A-Za-z]+[A-Za-z0-9--\._]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4})|NULL$',
									'^((\+)?[0-9]+)|NULL$');


INSERT INTO META_PROJETS VALUES(	'^[0-9]+$',
									'^[0-9]+$',
									'^[A-Z]+[(-| )?[A-Z]+]*$',
									NULL);
									

INSERT INTO META_LANGUES VALUES('^[A-Z]+[(-| )?[A-Z]+]*$');

INSERT INTO META_CENTREINTERET VALUES('^[A-Z]+[(-| )?[A-Z]+]*$');

INSERT INTO META_COMPETENCES VALUES('[A-Z#\.-_/+ ]',
									'^([A-Z]+[(-| )?[A-Z]+]*)|NULL$');
									
INSERT INTO META_CENTREINTERET VALUES('[A-Z#\.-_/+ ]');

INSERT INTO META_SITES_RESEAUX VALUES(	
									'^[0-9]+$',
									'^[0-9]+$',
									NULL);
									
INSERT INTO META_PERMIS VALUES('^(AM|BSR|A|A1|A2|B|B1|B2|BE|BVA|C|C1|CE|C1E|D|D1|D2|DE|DE1)$');

INSERT INTO META_DIPLOMES VALUES(	'^[0-9]+$',
									NULL,
									NULL);
									
--test ==> chaima
INSERT INTO META_CV VALUES(	'^[0-9]+$',
							'^[0-9]+$',
							'^[A-Za-z0-9àâéêèçïîô_\-]+\.pdf$',
							NULL,
							NULL,
							NULL,
							NULL,
							'^(ACCEPTE|REFUSE|INCONNU|TEST)$',
							NULL,
							'.+\.jpg$');

									
INSERT INTO META_FORMATIONS VALUES(	'^[0-9]+$',
									'^([0-9]+)|NULL$',
									NULL,
									NULL);	
									


-- Procédure d'insertion 

CREATE OR REPLACE PROCEDURE INSERT_CV(
	 IDCAN_ VARCHAR2,
	 NOMCV_ VARCHAR2,
	 DESCRIPTIFCV_ VARCHAR2,
	 POSTERECHERCHER_ VARCHAR2,
	 TYPEPOSTE_ VARCHAR2,
	 DISPONIBILITE_ DATE,
	 ADMIS_ VARCHAR2,
	 DATETRANSMISSION_ DATE,
	 PHOTO_ VARCHAR2,
	-- ID de retour
	 IDCV_ OUT VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaCv IS SELECT * FROM META_CV;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 test_existence NUMBER(2);
	 
	 BEGIN
		 FOR ligne IN cur_MetaCv LOOP 
			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF  (ligne.CONST_IDCAN 		    IS NOT NULL AND NOT REGEXP_LIKE(IDCAN_			, ligne.CONST_IDCAN)) 			OR
				 (ligne.CONST_NOMCV 		    IS NOT NULL AND NOT REGEXP_LIKE(NOMCV_			, ligne.CONST_NOMCV))  			OR
				 (ligne.CONST_DESCRIPTIFCV 	    IS NOT NULL AND NOT REGEXP_LIKE(DESCRIPTIFCV_	, ligne.CONST_DESCRIPTIFCV))  	OR
				 (ligne.CONST_POSTERECHERCHER   IS NOT NULL AND NOT REGEXP_LIKE(POSTERECHERCHER_, ligne.CONST_POSTERECHERCHER))	OR
				 (ligne.CONST_TYPEPOSTE 	    IS NOT NULL AND NOT REGEXP_LIKE(TYPEPOSTE_		, ligne.CONST_TYPEPOSTE))  		OR
				 (ligne.CONST_DISPONIBILITE     IS NOT NULL AND NOT REGEXP_LIKE(DISPONIBILITE_	, ligne.CONST_DISPONIBILITE))  	OR
				 (ligne.CONST_ADMIS 	        IS NOT NULL AND NOT REGEXP_LIKE(ADMIS_			, ligne.CONST_ADMIS))  		    OR
				 (ligne.CONST_DATETRANSMISSION  IS NOT NULL AND NOT REGEXP_LIKE(DATETRANSMISSION_, ligne.CONST_DATETRANSMISSION))OR
				 (ligne.CONST_PHOTO			    IS NOT NULL AND NOT REGEXP_LIKE(PHOTO_			, ligne.CONST_PHOTO)) 
			 THEN
				 IDCV_ := NULL;
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 SELECT COUNT(*) INTO test_existence FROM CV WHERE NOMCV = NOMCV_;
			 -- Si le cv existe déjà
			 IF test_existence > 0 THEN 
				 -- On recupere l'ID de l'adresse existante
				 SELECT IDCV INTO IDCV_ FROM CV WHERE NOMCV = NOMCV_;
				 DBMS_OUTPUT.PUT_LINE('CV deja existante. Pas d insertion');
			 ELSE
				 -- Sinon on crée un ID et on insère l'adresse
				 SELECT seq_cv.nextval INTO IDCV_ FROM DUAL;
				 INSERT INTO CV VALUES(IDCV_, IDCAN_, NOMCV_, DESCRIPTIFCV_, POSTERECHERCHER_, TYPEPOSTE_,DISPONIBILITE_, ADMIS_, DATETRANSMISSION_,PHOTO_);
				 DBMS_OUTPUT.PUT_LINE('Nouveau CV insere.');
			 END IF; 
		 END IF;
	 END;
	/

CREATE OR REPLACE PROCEDURE INSERT_ADRESSES(
	 NUMADR_ VARCHAR2,
	 LOCALITEADR_ VARCHAR2,
	 NOMRUEADR_ VARCHAR2,
	 CPADR_ VARCHAR2,
	 VILLEADR_ VARCHAR2,
	 PAYSADR_ VARCHAR2,
	 CONTINENTADR_ VARCHAR2,
	 -- On retourne l'ID poour les besoins éventuelles d'autres insertions
	 IDADR_ OUT VARCHAR2
	 ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaAdr IS SELECT * FROM META_ADRESSES;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 test_existence NUMBER(2);

	 BEGIN
	 	 IDADR_ := NULL;
		 IF (NUMADR_ IS NOT NULL OR LOCALITEADR_ IS NOT NULL OR NOMRUEADR_ IS NOT NULL OR CPADR_ IS NOT NULL OR VILLEADR_ IS NOT NULL OR PAYSADR_ IS NOT NULL OR CONTINENTADR_ IS NOT NULL) THEN 
			 FOR ligne IN cur_MetaAdr LOOP 
				-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
				 IF  (ligne.CONST_NUMADR 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(NUMADR_,'NULL')		, ligne.CONST_NUMADR)) 			OR
					 (ligne.CONST_LOCALITEADR 	IS NOT NULL AND NOT REGEXP_LIKE(NVL(LOCALITEADR_,'NULL')	, ligne.CONST_LOCALITEADR)) 	OR
					 (ligne.CONST_NOMRUEADR 	IS NOT NULL AND NOT REGEXP_LIKE(NVL(NOMRUEADR_,'NULL')	, ligne.CONST_NOMRUEADR)) 		OR
					 (ligne.CONST_CPADR 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(CPADR_,'NULL'), ligne.CONST_CPADR ))     OR
					 (ligne.CONST_VILLEADR 		IS NOT NULL AND NOT REGEXP_LIKE(VILLEADR_	, ligne.CONST_VILLEADR)) 		OR
					 (ligne.CONST_PAYSADR 		IS NOT NULL AND NOT REGEXP_LIKE(PAYSADR_		, ligne.CONST_PAYSADR)) 		OR
					 (ligne.CONST_CONTINENTADR 	IS NOT NULL AND NOT REGEXP_LIKE(CONTINENTADR_, ligne.CONST_CONTINENTADR))
				 THEN
					 IDADR_ := NULL;
					 anomalie := 'TRUE';
				 END IF;
			 END LOOP;
			--Si ANOMALIE on n'insère pas, sinon on insère
			 IF anomalie = 'TRUE' THEN 
				 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
			 ELSE
				 -- On vérifie si l'adresse existe déjà dans la base
				 SELECT COUNT(*) INTO test_existence FROM ADRESSES WHERE NUMADR = NUMADR_ AND LOCALITEADR = LOCALITEADR_ AND NOMRUEADR = NOMRUEADR_ AND CPADR = CPADR_  AND VILLEADR = VILLEADR_ AND PAYSADR = PAYSADR_ AND CONTINENTADR = CONTINENTADR_;
				 -- Si l'adresse existe déjà dans la base
				 IF test_existence > 0 THEN 
					 -- On recupere l'ID de l'adresse existante
					 SELECT IDADR INTO IDADR_ FROM ADRESSES WHERE NUMADR = NUMADR_ AND LOCALITEADR = LOCALITEADR_ AND NOMRUEADR = NOMRUEADR_ AND CPADR = CPADR_  AND VILLEADR = VILLEADR_ AND PAYSADR = PAYSADR_ AND CONTINENTADR = CONTINENTADR_;
					 DBMS_OUTPUT.PUT_LINE('Adresse deja existante. Pas d insertion');
				 ELSE
					 -- Sinon on crée un ID et on insère l'adresse
					 SELECT seq_adresse.nextval INTO IDADR_ FROM DUAL;
					 INSERT INTO ADRESSES VALUES(IDADR_, NUMADR_, LOCALITEADR_, NOMRUEADR_, CPADR_, VILLEADR_, PAYSADR_, CONTINENTADR_);
					 DBMS_OUTPUT.PUT_LINE('Nouvelle adresse inseree');
				 END IF; 
			 END IF;
		 END IF;
	 END;
	/
	
CREATE OR REPLACE PROCEDURE INSERT_CANDIDATS(
	 IDADR_ VARCHAR2,
	 NOMCAN_ VARCHAR2,
	 PRENOMCAN_ VARCHAR2,
	 SEXE_ CHAR,
	 AGE_ NUMBER,
	 DATENAISSANCE_ DATE,
	 MAILCAN_ VARCHAR2,
	 NATIONALITE_ VARCHAR2,
	 TELCAN_ VARCHAR2,
	 -- On retourne l'ID poour les besoins éventuelles d'autres insertions	 
	 IDCAN_ OUT VARCHAR2
	 ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaCan IS SELECT * FROM META_CANDIDATS;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 test_existence NUMBER(2);
	 test_IDADR VARCHAR2(150);
	 test_SEXE VARCHAR2(150);
	 test_AGE VARCHAR2(150);
	 test_DATENAISSANCE VARCHAR2(150);
	 test_MAILCAN VARCHAR2(150);
	 test_NATIONALITE VARCHAR2(150);
	 test_TELCAN VARCHAR2(150);
	 
	 BEGIN
		 FOR ligne IN cur_MetaCan LOOP 

			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF  (ligne.CONST_IDADR 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(IDADR_,'NULL'), ligne.CONST_IDADR)) 				OR
				 (ligne.CONST_NOMCAN	 	IS NOT NULL AND NOT REGEXP_LIKE(NOMCAN_			, ligne.CONST_NOMCAN))		 			OR
				 (ligne.CONST_PRENOMCAN 	IS NOT NULL AND NOT REGEXP_LIKE(PRENOMCAN_		, ligne.CONST_PRENOMCAN)) 				OR
				 (ligne.CONST_SEXE	 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(SEXE_,'NULL'), ligne.CONST_SEXE)) 					OR
				 (ligne.CONST_AGE	 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(TO_CHAR(AGE_),'NULL')	, ligne.CONST_AGE)) 		OR
				 (ligne.CONST_DATENAISSANCE IS NOT NULL AND NOT REGEXP_LIKE(NVL(DATENAISSANCE_,'NULL'), ligne.CONST_DATENAISSANCE)) OR
				 (ligne.CONST_MAILCAN 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(MAILCAN_,'NULL'), ligne.CONST_MAILCAN)) 			OR
				 (ligne.CONST_NATIONALITE 	IS NOT NULL AND NOT REGEXP_LIKE(NVL(NATIONALITE_,'NULL'), ligne.CONST_NATIONALITE))		OR
				 (ligne.CONST_TELCAN 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(TELCAN_,'NULL'), ligne.CONST_TELCAN))
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas
		 IF anomalie = 'TRUE' THEN 
		 	 IDCAN_ := NULL;
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			-- On vérifie que le candidat n'existe pas déja dans la base
			-- SELECT COUNT(*) INTO test_existence FROM CANDIDATS WHERE NOMCAN = NOMCAN_ AND PRENOMCAN = PRENOMCAN_;
			 
			 SELECT COUNT(*) INTO test_existence FROM CANDIDATS WHERE 
			 (UTL_MATCH.jaro_winkler_similarity(NOMCAN,NOMCAN_) > 86 OR UTL_MATCH.edit_distance_similarity(NOMCAN,NOMCAN_) > 86)
			 AND 
			 (UTL_MATCH.jaro_winkler_similarity(PRENOMCAN,PRENOMCAN_) > 86 OR UTL_MATCH.edit_distance_similarity(PRENOMCAN,PRENOMCAN_) > 86)
			 AND ROWNUM = 1 ORDER BY NOMCAN, PRENOMCAN;			 

			-- Si le candidat existe déjà dans la table
  			 IF test_existence > 0 THEN 
				 -- On évite l'insertion de similaire
				 -- On recupere l'ID du candidat existant (pour les futurs insertions => valeurs de retour)
				 -- SELECT IDCAN INTO IDCAN_ FROM CANDIDATS WHERE NOMCAN = NOMCAN_ AND PRENOMCAN = PRENOMCAN_;
				 
				 SELECT IDCAN, IDADR, SEXE, AGE, DATENAISSANCE, MAILCAN, NATIONALITE, TELCAN INTO IDCAN_, test_IDADR, test_SEXE, test_AGE, test_DATENAISSANCE, test_MAILCAN, test_NATIONALITE, test_TELCAN FROM CANDIDATS WHERE 
				 (UTL_MATCH.jaro_winkler_similarity(NOMCAN,NOMCAN_) > 86 OR UTL_MATCH.edit_distance_similarity(NOMCAN,NOMCAN_) > 86)
				 AND 
				 (UTL_MATCH.jaro_winkler_similarity(PRENOMCAN,PRENOMCAN_) > 86 OR UTL_MATCH.edit_distance_similarity(PRENOMCAN,PRENOMCAN_) > 86)
				 AND ROWNUM = 1 ORDER BY NOMCAN, PRENOMCAN;	
				 
				 -- On met à jour les éventuelles valeurs manquantes du candidat deja de la base par les valeurs du candidat similaire
				 IF test_IDADR IS NULL AND IDADR_ IS NOT NULL THEN 
					 EXECUTE IMMEDIATE 'UPDATE CANDIDATS SET IDADR = ' || CHR(39) || IDADR_ || CHR(39) || ' WHERE IDCAN = ' || CHR(39) || IDCAN_ || CHR(39);
				 END IF;
				 IF test_SEXE IS NULL AND SEXE_ IS NOT NULL THEN 
					 EXECUTE IMMEDIATE 'UPDATE CANDIDATS SET SEXE = ' || CHR(39) || SEXE_ || CHR(39) || ' WHERE IDCAN = ' || CHR(39) || IDCAN_ || CHR(39);
				 END IF;
				 IF test_AGE IS NULL AND AGE_ IS NOT NULL THEN 
					 EXECUTE IMMEDIATE 'UPDATE CANDIDATS SET AGE = ' || CHR(39) || AGE_ || CHR(39) || ' WHERE IDCAN = ' || CHR(39) || IDCAN_ || CHR(39);
				 END IF;
				 IF test_DATENAISSANCE IS NULL AND DATENAISSANCE_ IS NOT NULL THEN 
					 EXECUTE IMMEDIATE 'UPDATE CANDIDATS SET DATENAISSANCE = ' || CHR(39) || DATENAISSANCE_ || CHR(39) || ' WHERE IDCAN = ' || CHR(39) || IDCAN_ || CHR(39);
				 END IF;
				 IF test_MAILCAN IS NULL AND MAILCAN_ IS NOT NULL THEN 
					 EXECUTE IMMEDIATE 'UPDATE CANDIDATS SET MAILCAN = ' || CHR(39) || MAILCAN_ || CHR(39) || ' WHERE IDCAN = ' || CHR(39) || IDCAN_ || CHR(39);
				 END IF;
				 IF test_NATIONALITE IS NULL AND NATIONALITE_ IS NOT NULL THEN 
					 EXECUTE IMMEDIATE 'UPDATE CANDIDATS SET NATIONALITE = ' || CHR(39) || NATIONALITE_ || CHR(39) || ' WHERE IDCAN = ' || CHR(39) || IDCAN_ || CHR(39);
				 END IF;
				 IF test_TELCAN IS NULL AND TELCAN_ IS NOT NULL THEN 
					 EXECUTE IMMEDIATE 'UPDATE CANDIDATS SET TELCAN = ' || CHR(39) || TELCAN_ || CHR(39) || ' WHERE IDCAN = ' || CHR(39) || IDCAN_ || CHR(39);
				 END IF;
				 
				 DBMS_OUTPUT.PUT_LINE('Candidat deja existant. Pas d insertion');
			 ELSE
				 -- Sinon on crée un ID et on insère l'adresse
				 SELECT seq_candidat.nextval INTO IDCAN_ FROM DUAL;
				 INSERT INTO CANDIDATS VALUES(IDCAN_, IDADR_, NOMCAN_, PRENOMCAN_, SEXE_, AGE_, DATENAISSANCE_, MAILCAN_, NATIONALITE_, TELCAN_);
				 DBMS_OUTPUT.PUT_LINE('Nouveau candidat insere.');
			 END IF; 
		 END IF;
	 END;
	/

CREATE OR REPLACE PROCEDURE INSERT_PERMIS(
	 NOMPERM_ VARCHAR2 
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaPerm IS SELECT * FROM META_PERMIS;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 test_existence NUMBER(2);
	 
	 BEGIN
		 FOR ligne IN cur_MetaPerm LOOP 
			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF (ligne.CONST_NOMPERM IS NOT NULL AND NOT REGEXP_LIKE(NOMPERM_, ligne.CONST_NOMPERM))
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 SELECT COUNT(*) INTO test_existence FROM PERMIS WHERE NOMPERM = NOMPERM_;
			 IF test_existence = 0 THEN 
				 INSERT INTO PERMIS VALUES(NOMPERM_);
				 DBMS_OUTPUT.PUT_LINE('Nouveau permis insere.');
			 END IF; 
		 END IF;
	 END;
	/
	
CREATE OR REPLACE PROCEDURE INSERT_OBTENTIONPERMIS(
	-- On passe le nom du permis, la procédure se chargera de recuperer l'id
	 NOMPERM_ VARCHAR2, 
	 IDCAN_ VARCHAR2,
	 DATEOBTENTION_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	 test_existence NUMBER(2);
	 
	 BEGIN
		 IF NOMPERM_ IS NOT NULL AND IDCAN_ IS NOT NULL THEN
			-- On insère le permis (la vérification de son existence ou non dans la table permis se fait dans cette procédure)
			 INSERT_PERMIS(NOMPERM_);

			 SELECT COUNT(*) INTO test_existence FROM OBTENTIONPERMIS WHERE NOMPERM = NOMPERM_ AND IDCAN = IDCAN_;
			 IF test_existence = 0 THEN 
				-- On insère la relation qu'il existe entre le candidat et le permis
				 INSERT INTO OBTENTIONPERMIS VALUES(NOMPERM_, IDCAN_, DATEOBTENTION_);
			 END IF;
		 END IF;
	 END;
	/
	
CREATE OR REPLACE PROCEDURE INSERT_CENTREINTERET(
	 NOMCTRINT_ VARCHAR2,
	 NOMCTRINTRET_ OUT VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaCInt IS SELECT * FROM META_CENTREINTERET;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 test_existence NUMBER(2);

	 BEGIN
		 FOR ligne IN cur_MetaCInt LOOP 
			 IF (ligne.CONST_NOMCTRINT IS NOT NULL AND NOT REGEXP_LIKE(NOMCTRINT_, ligne.CONST_NOMCTRINT))
			 THEN
				 NOMCTRINTRET_ := NULL;
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE('/!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			-- On vérifie que le centre d'intérêt n'existe pas déjà dans la table
		 	 SELECT COUNT(*) INTO test_existence FROM CENTREINTERET WHERE (UTL_MATCH.jaro_winkler_similarity(NOMCTRINT,NOMCTRINT_) > 85 OR UTL_MATCH.edit_distance_similarity(NOMCTRINT,NOMCTRINT_) > 85);
		     IF test_existence = 0 THEN 
			 	 NOMCTRINTRET_ := NOMCTRINT_;
				 INSERT INTO CENTREINTERET VALUES(NOMCTRINT_);
				 DBMS_OUTPUT.PUT_LINE('Nouveau centre interet insere.');
			 ELSE 
				 SELECT NOMCTRINT INTO NOMCTRINTRET_ FROM CENTREINTERET WHERE (UTL_MATCH.jaro_winkler_similarity(NOMCTRINT,NOMCTRINT_) > 85 OR UTL_MATCH.edit_distance_similarity(NOMCTRINT,NOMCTRINT_) > 85) AND ROWNUM = 1;
			 END IF; 
		 END IF;
	 END;
	/
	
CREATE OR REPLACE PROCEDURE INSERT_RELATION_CENTINT_CAN(
	 NOMCTRINT_ VARCHAR2,
	 IDCAN_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	 test_existence NUMBER(2);
	 NOMCTRINTRET_ VARCHAR2(150);
	 
	 BEGIN
		 INSERT_CENTREINTERET(NOMCTRINT_, NOMCTRINTRET_);
		 IF NOMCTRINTRET_ IS NOT NULL AND IDCAN_ IS NOT NULL THEN
			 SELECT COUNT(*) INTO test_existence FROM RELATION_CENTINT_CAN WHERE NOMCTRINT = NOMCTRINTRET_ AND IDCAN = IDCAN_;
			 IF test_existence = 0 THEN 
				 INSERT INTO RELATION_CENTINT_CAN VALUES(NOMCTRINTRET_, IDCAN_);
				 DBMS_OUTPUT.PUT_LINE('Nouvelle relation candidat/centre-interet inseree.');
			 END IF;
		 END IF;
	 END;
	/
	
	
CREATE OR REPLACE PROCEDURE INSERT_SITES_RESEAUX(
	 IDCAN_ VARCHAR2,
	 LIEN_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaSitRes IS SELECT * FROM META_SITES_RESEAUX;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 IDSITERES_ VARCHAR2(150);
	 test_existence NUMBER(2);
	 
	 BEGIN
		 FOR ligne IN cur_MetaSitRes LOOP 
			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF (ligne.CONST_IDCAN IS NOT NULL AND NOT REGEXP_LIKE(NVL(IDCAN_,'NULL'), ligne.CONST_IDCAN)) OR
				(ligne.CONST_LIEN IS NOT NULL AND NOT REGEXP_LIKE(LIEN_, ligne.CONST_LIEN)) 
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' OR IDCAN_ IS NULL THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 SELECT COUNT(*) INTO test_existence FROM SITES_RESEAUX WHERE LIEN = LIEN_ AND IDCAN = IDCAN_;
			 IF test_existence = 0 THEN
				 SELECT seq_siteres.nextval INTO IDSITERES_ FROM DUAL;
				 INSERT INTO SITES_RESEAUX VALUES(IDSITERES_, IDCAN_, LIEN_);
				 DBMS_OUTPUT.PUT_LINE('Nouveau site/reseau insere.');
			 END IF;
		 END IF;
	 END;
	/
	
CREATE OR REPLACE PROCEDURE INSERT_DIPLOMES(
	 NOMDIMPLOME_ VARCHAR2,
	 DESCRIPTIFDIPLOME_ VARCHAR2,
	 IDDIPLOME_ OUT VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaDipl IS SELECT * FROM META_DIPLOMES;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 test_existence NUMBER(2);
	 
	 BEGIN
		 FOR ligne IN cur_MetaDipl LOOP 
			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF  (ligne.CONST_NOMDIMPLOME 		IS NOT NULL AND NOT REGEXP_LIKE(NOMDIMPLOME_	, ligne.CONST_NOMDIMPLOME)) OR
				 (ligne.CONST_DESCRIPTIFDIPLOME IS NOT NULL AND NOT REGEXP_LIKE(DESCRIPTIFDIPLOME_, ligne.CONST_DESCRIPTIFDIPLOME))
			 THEN
				 IDDIPLOME_ := NULL;
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 SELECT COUNT(*) INTO test_existence FROM DIPLOMES WHERE NOMDIMPLOME = NOMDIMPLOME_;
			 -- Si le diplome existe déjà dans la base
			 IF test_existence > 0 THEN
			     SELECT IDDIPLOME INTO IDDIPLOME_ FROM DIPLOMES WHERE NOMDIMPLOME = NOMDIMPLOME_;
			 ELSE 
			 	 SELECT seq_diplome.nextval INTO IDDIPLOME_ FROM DUAL;
			 	 INSERT INTO DIPLOMES VALUES(IDDIPLOME_, NOMDIMPLOME_, DESCRIPTIFDIPLOME_);
				 DBMS_OUTPUT.PUT_LINE('Nouveau diplome insere.');
			 END IF;
		 END IF;
	 END;
	/
	

CREATE OR REPLACE PROCEDURE INSERT_OBTENTIONDIPLOME(
	 IDDIPLOME_ VARCHAR2, 
	 IDCAN_ VARCHAR2,
	 MENTION_ VARCHAR2,
	 DATEOBTENTION_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	 test_existence NUMBER(2);
	 
	 BEGIN
		 IF IDDIPLOME_ IS NOT NULL AND IDCAN_ IS NOT NULL THEN
			-- On vérifie que l'association entre le diplome et le candidat n'existe pas déjà
			 SELECT COUNT(*) INTO test_existence FROM OBTENTIONDIPLOME WHERE IDDIPLOME = IDDIPLOME_ AND IDCAN = IDCAN_;
			 IF test_existence = 0 THEN 
				 INSERT INTO OBTENTIONDIPLOME VALUES(IDDIPLOME_, IDCAN_, MENTION_,DATEOBTENTION_);
				 DBMS_OUTPUT.PUT_LINE('Nouvelle relation candidat/diplome inseree.');
			 END IF;
		 END IF;
	 END;
	/	
	
CREATE OR REPLACE PROCEDURE INSERT_CATEGORIE_CPT(
	 NOMCATEGORIE_ VARCHAR2,
	 NOMCATEGORIERET_ OUT VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaCpt IS SELECT * FROM META_CATEGORIE_CPT;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 test_existence NUMBER(2);
	 
	 BEGIN
	 
	 	 NOMCATEGORIERET_ := NULL;

		 IF NOMCATEGORIE_ IS NOT NULL THEN
			 FOR ligne IN cur_MetaCpt LOOP 
				-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
				 IF (ligne.CONST_NOMCATEGORIE IS NOT NULL AND NOT REGEXP_LIKE(NOMCATEGORIE_,'NULL', ligne.CONST_NOMCATEGORIE))
				 THEN
					 NOMCATEGORIERET_ := NULL;
					 anomalie := 'TRUE';
				 END IF;
			 END LOOP;
			--Si ANOMALIE on n'insère pas, sinon on insère
			 IF anomalie = 'TRUE' THEN 
				 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
			 ELSE
				-- La valeur de retour est égale à la valeur de la catégorie
			 	 NOMCATEGORIERET_ := NOMCATEGORIE_;
				 SELECT COUNT(*) INTO test_existence FROM CATEGORIE_CPT WHERE NOMCATEGORIE = NOMCATEGORIE_;
				 IF test_existence = 0 THEN 
					 INSERT INTO CATEGORIE_CPT VALUES(NOMCATEGORIE_);
					 DBMS_OUTPUT.PUT_LINE('Nouvelle categorie inseree.');
				 END IF;
			 END IF;
		 END IF;
	 END;
	/
	
CREATE OR REPLACE PROCEDURE INSERT_COMPETENCES(
	 NOMCPT_ VARCHAR2,
	 NOMCATEGORIE_ VARCHAR2,
	 NOMCPTRET_ OUT VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaCpt IS SELECT * FROM META_COMPETENCES;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 test_existence NUMBER(2);
	 NOMCATEGORIERET_ VARCHAR2(150);
	 
	 BEGIN
	 	 NOMCPTRET_ := NULL;

		 IF NOMCPT_ IS NOT NULL THEN
		 
			 FOR ligne IN cur_MetaCpt LOOP 
				-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
				 IF (ligne.CONST_NOMCPT IS NOT NULL AND NOT REGEXP_LIKE(NOMCPT_	, ligne.CONST_NOMCPT)) OR
					(ligne.CONST_NOMCATEGORIE IS NOT NULL AND NOT REGEXP_LIKE(NVL(NOMCATEGORIE_,'NULL'), ligne.CONST_NOMCATEGORIE))
				 THEN
					 NOMCPTRET_ := NULL;
					 anomalie := 'TRUE';
				 END IF;
			 END LOOP;
			--Si ANOMALIE on n'insère pas, sinon on insère
			 IF anomalie = 'TRUE' THEN 
				 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
			 ELSE
				 SELECT COUNT(*) INTO test_existence FROM COMPETENCES WHERE (UTL_MATCH.jaro_winkler_similarity(NOMCPT,NOMCPT_) > 85 OR UTL_MATCH.edit_distance_similarity(NOMCPT,NOMCPT_) > 85) AND ROWNUM = 1 ORDER BY NOMCPT ;

				 IF test_existence > 0 THEN 
					 SELECT NOMCPT INTO NOMCPTRET_ FROM COMPETENCES WHERE (UTL_MATCH.jaro_winkler_similarity(NOMCPT,NOMCPT_) > 80 OR UTL_MATCH.edit_distance_similarity(NOMCPT,NOMCPT_) > 80) AND ROWNUM = 1 ORDER BY NOMCPT ;			 
				 ELSE 
					 NOMCPTRET_ := NOMCPT_;

					-- On insère d'abord la catégorie de la compétence en mettant dans NOMCATEGORIERET_ la catégorie de retour (vérification que tout s'est bien passé)
					 INSERT_CATEGORIE_CPT(NOMCATEGORIE_, NOMCATEGORIERET_);
					-- On insère ensuite la compétence et sa catégorie
					 INSERT INTO COMPETENCES VALUES(NOMCPT_, NOMCATEGORIERET_);
					 DBMS_OUTPUT.PUT_LINE('Nouvelle competence inseree.');
				 END IF;
			 END IF;
		 END IF;

	 END;
	/
	
CREATE OR REPLACE PROCEDURE INSERT_RELATION_COMP_CAN(
	 NOMCPT_ VARCHAR2,
	 NOMCATEGORIE_ VARCHAR2,
	 IDCAN_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	 test_existence NUMBER(2);
	 NOMCPTRET_ VARCHAR2(150);
	 
	 BEGIN
	     INSERT_COMPETENCES(NOMCPT_, NOMCATEGORIE_, NOMCPTRET_);

		 IF NOMCPTRET_ IS NOT NULL AND IDCAN_ IS NOT NULL THEN
			-- Permet d'éviter l'insertion de doublons
			 SELECT COUNT(*) INTO test_existence FROM RELATION_COMP_CAN WHERE NOMCPT = NOMCPTRET_ AND IDCAN = IDCAN_;
			 IF test_existence = 0 THEN 
				 DBMS_OUTPUT.PUT_LINE('Nouvelle relation Competence/Candidat inseree.');
				 INSERT INTO RELATION_COMP_CAN VALUES(NOMCPTRET_, IDCAN_);
			 END IF;
		 END IF;
	 END;
	/
	
CREATE OR REPLACE PROCEDURE INSERT_LANGUES(
	 NOMLANGUE_ VARCHAR2,
	 NOMLANGUERET_ OUT VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaLang IS SELECT * FROM META_LANGUES;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 test_existence NUMBER(2);

	 BEGIN
	     NOMLANGUERET_ := NULL;
		 IF NOMLANGUE_ IS NOT NULL THEN
			 FOR ligne IN cur_MetaLang LOOP 
				-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
				 IF  (ligne.CONST_NOMLANGUE IS NOT NULL AND NOT REGEXP_LIKE(NOMLANGUE_, ligne.CONST_NOMLANGUE))
				 THEN
					 anomalie := 'TRUE';
				 END IF;
			 END LOOP;
			--Si ANOMALIE on n'insère pas, sinon on insère
			 IF anomalie = 'TRUE' THEN 
				 NOMLANGUERET_ := NULL;
				 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
			 ELSE
				 SELECT COUNT(*) INTO test_existence FROM LANGUES WHERE NOMLANGUE = NOMLANGUE_;
				 NOMLANGUERET_ := NOMLANGUE_;
				 IF test_existence = 0 THEN
					-- Valeur de retour 
					 INSERT INTO LANGUES VALUES(NOMLANGUE_);
					 DBMS_OUTPUT.PUT_LINE('Nouvelle langue inseree.');		 
				 END IF;
			 END IF;
		 END IF;
	 END;
	/
	
	
CREATE OR REPLACE PROCEDURE INSERT_RELATION_LANG_CAN(
	-- On passe le nom du permis, la procédure se chargera de recuperer l'id
	 NOMLANGUE_ VARCHAR2, 
	 IDCAN_ VARCHAR2,
	 NIVEAU_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	 test_existence NUMBER(2);
	 NOMLANGUERET_ VARCHAR2(150);
	 
	 BEGIN
		 INSERT_LANGUES(NOMLANGUE_, NOMLANGUERET_);
		 IF NOMLANGUERET_ IS NOT NULL AND IDCAN_ IS NOT NULL THEN				 
			-- Permet d'éviter l'insertion de doublons
			 SELECT COUNT(*) INTO test_existence FROM RELATION_LANG_CAN WHERE NOMLANGUE = NOMLANGUERET_ AND IDCAN = IDCAN_;
			 IF test_existence = 0 THEN 
				 INSERT INTO RELATION_LANG_CAN VALUES(NOMLANGUERET_, IDCAN_, NIVEAU_);
				 DBMS_OUTPUT.PUT_LINE('Nouvelle relation candidat/langue inseree.');		 
			 END IF;
		 END IF;
	 END;
	/
	

CREATE OR REPLACE PROCEDURE INSERT_ETABLISSEMENTSCOLAIRES(
	 IDADR_ VARCHAR2,
	 NOMETASCO_ VARCHAR2,
	 TELETASCO_ VARCHAR2,
	 IDETASCO_ OUT VARCHAR2
	 ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaEtbSco IS SELECT * FROM META_ETABLISSEMENTSCOLAIRES;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 test_existence NUMBER(2);
	 
	 BEGIN
		 IDETASCO_ := NULL;
		 IF NOMETASCO_ IS NOT NULL THEN
			 FOR ligne IN cur_MetaEtbSco LOOP 
				-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
				 IF  (ligne.CONST_IDADR 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(IDADR_,'NULL'), ligne.CONST_IDADR)) 			 OR
					 (ligne.CONST_NOMETASCO	 	IS NOT NULL AND NOT REGEXP_LIKE(NVL(NOMETASCO_,'NULL'), ligne.CONST_NOMETASCO))   OR
					 (ligne.CONST_TELETASCO	    IS NOT NULL AND NOT REGEXP_LIKE(NVL(TELETASCO_,'NULL'), ligne.CONST_TELETASCO))
				 THEN
					 IDETASCO_ := NULL;
					 anomalie := 'TRUE';
				 END IF;
			 END LOOP;
			--Si ANOMALIE on n'insère pas, sinon on insère
			 IF anomalie = 'TRUE' THEN 
				 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
			 ELSE
				 SELECT COUNT(*) INTO test_existence FROM ETABLISSEMENTSCOLAIRES WHERE NOMETASCO = NOMETASCO_;
				 IF test_existence = 0 THEN
					 SELECT seq_etasco.nextval INTO IDETASCO_ FROM DUAL;
					 INSERT INTO ETABLISSEMENTSCOLAIRES VALUES(IDETASCO_, IDADR_, NOMETASCO_, TELETASCO_);
					 DBMS_OUTPUT.PUT_LINE('Nouvel etablissement scolaire insere.');
				 ELSE
					 SELECT IDETASCO INTO IDETASCO_ FROM ETABLISSEMENTSCOLAIRES WHERE NOMETASCO = NOMETASCO_;
				 END IF;
			 END IF;
		 END IF;
	 END;
	/
	
CREATE OR REPLACE PROCEDURE INSERT_ENTREPRISE(
	 IDADR_ VARCHAR2,
	 NOMENT_ VARCHAR2,
	 MAILENT_ VARCHAR2,
	 TELENT_ VARCHAR2,
	 IDENT_ OUT VARCHAR2
	 ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaEnt IS SELECT * FROM META_ENTREPRISES;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 test_existence NUMBER(2);
	 
	 BEGIN
		 IDENT_ := NULL;
		 IF NOMENT_ IS NOT NULL THEN
			 FOR ligne IN cur_MetaEnt LOOP 
				-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
				 IF  (ligne.CONST_IDADR 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(IDADR_,'NULL'), ligne.CONST_IDADR)) 	  OR
					 (ligne.CONST_NOMENT	 	IS NOT NULL AND NOT REGEXP_LIKE(NVL(NOMENT_,'NULL'), ligne.CONST_NOMENT))     OR
					 (ligne.CONST_MAILENT	 	IS NOT NULL AND NOT REGEXP_LIKE(NVL(MAILENT_,'NULL'), ligne.CONST_MAILENT)) OR
					 (ligne.CONST_TELENT	    IS NOT NULL AND NOT REGEXP_LIKE(NVL(TELENT_,'NULL'), ligne.CONST_TELENT))
				 THEN
					 IDENT_ := NULL;
					 anomalie := 'TRUE';
				 END IF;
			 END LOOP;
			--Si ANOMALIE on n'insère pas, sinon on insère
			 IF anomalie = 'TRUE' THEN 
				 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
			 ELSE
				 SELECT COUNT(*) INTO test_existence FROM ENTREPRISES WHERE NOMENT = NOMENT_;
				 IF test_existence = 0 THEN
					 SELECT seq_entreprise.nextval INTO IDENT_ FROM DUAL;
					 INSERT INTO ENTREPRISES VALUES(IDENT_, IDADR_, NOMENT_, MAILENT_, TELENT_);
					 DBMS_OUTPUT.PUT_LINE('Nouvelle entreprise inseree.');
				 ELSE
					 SELECT IDENT INTO IDENT_ FROM ENTREPRISES WHERE NOMENT = NOMENT_;
				 END IF;
			 END IF;
		 END IF;
	 END;
	/
	
	
CREATE OR REPLACE PROCEDURE INSERT_FORMATIONS(
	 IDETASCO_ VARCHAR2,
	 NIVEAU_ VARCHAR2,
	 SPECIALITE_ VARCHAR2,
	-- Valeur de retour
	 IDFORM_ OUT VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaForm IS SELECT * FROM META_FORMATIONS;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 test_existence NUMBER(2);
	 
	 BEGIN
		 IDFORM_ := NULL;
		 IF NIVEAU_ IS NOT NULL THEN
			 FOR ligne IN cur_MetaForm LOOP 

				-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
				 IF  (ligne.CONST_IDETASCO 	 IS NOT NULL AND NOT REGEXP_LIKE(IDETASCO_	, ligne.CONST_IDETASCO))  OR
					 (ligne.CONST_NIVEAU     IS NOT NULL AND NOT REGEXP_LIKE(NIVEAU_	, ligne.CONST_NIVEAU))    OR
					 (ligne.CONST_SPECIALITE IS NOT NULL AND NOT REGEXP_LIKE(SPECIALITE_, ligne.CONST_SPECIALITE))
				 THEN
					 anomalie := 'TRUE';
				 END IF;
			 END LOOP;
			--Si ANOMALIE on n'insère pas, sinon on insère
			 IF anomalie = 'TRUE' THEN 
				 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
			 ELSE
				 SELECT COUNT(*) INTO test_existence FROM FORMATIONS WHERE IDETASCO = IDETASCO_ AND (UTL_MATCH.jaro_winkler_similarity(NIVEAU,NIVEAU_) >= 95 OR UTL_MATCH.edit_distance_similarity(NIVEAU, NIVEAU_) >= 95) AND (SPECIALITE = SPECIALITE_ OR (SPECIALITE IS NULL AND SPECIALITE_ IS NULL));
				 IF test_existence = 0 THEN
					 SELECT seq_formation.nextval INTO IDFORM_ FROM DUAL;
					 INSERT INTO FORMATIONS VALUES(IDFORM_, IDETASCO_, NIVEAU_, SPECIALITE_);
					 DBMS_OUTPUT.PUT_LINE('Nouvelle formation inseree.');
				 ELSE
					 SELECT IDFORM INTO IDFORM_ FROM FORMATIONS WHERE IDETASCO = IDETASCO_ AND (UTL_MATCH.jaro_winkler_similarity(NIVEAU,NIVEAU_) >= 95 OR UTL_MATCH.edit_distance_similarity(NIVEAU, NIVEAU_) >= 95) AND (SPECIALITE = SPECIALITE_ OR (SPECIALITE IS NULL AND SPECIALITE_ IS NULL)) AND ROWNUM = 1;
				 END IF;
			 END IF;
		 END IF;
	 END;
	/
	
	
CREATE OR REPLACE PROCEDURE INSERT_EXPERIENCE(
	 IDENT_ VARCHAR2,
	 IDCAN_ VARCHAR2,
	 POSTE_ VARCHAR2,
	 TYPECONTRAT_ VARCHAR2,
	 DESCRIPTIFEXP_ VARCHAR2,
	 DATEDEBUTEXP_ VARCHAR2,
	 DATEFINEXP_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	 test_existence NUMBER(2);

	 BEGIN
		 IF IDENT_ IS NOT NULL AND IDCAN_ IS NOT NULL THEN		 
			 SELECT COUNT(*) INTO test_existence FROM EXPERIENCES WHERE IDENT = IDENT_ AND IDCAN = IDCAN_;
			 IF test_existence = 0 THEN 
				 INSERT INTO EXPERIENCES VALUES(IDENT_, IDCAN_, POSTE_, TYPECONTRAT_, DESCRIPTIFEXP_, DATEDEBUTEXP_, DATEFINEXP_);
				 DBMS_OUTPUT.PUT_LINE('Nouvelle experience Candidat/Entreprise inseree.');
			 END IF;
		 END IF;
	 END;
	/
	
CREATE OR REPLACE PROCEDURE INSERT_SUIT_FORMATIONS(
	 IDFORM_ VARCHAR2,
	 IDCAN_ VARCHAR2,
	 DATEDEBUTFORM_ VARCHAR2,
	 DATEFINFORM_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	 test_existence NUMBER(2);

	 BEGIN
		 IF IDFORM_ IS NOT NULL AND IDCAN_ IS NOT NULL THEN		 
			 SELECT COUNT(*) INTO test_existence FROM SUIT_FORMATIONS WHERE IDFORM = IDFORM_ AND IDCAN = IDCAN_;
			 IF test_existence = 0 THEN 
				 INSERT INTO SUIT_FORMATIONS VALUES(IDFORM_, IDCAN_, DATEDEBUTFORM_, DATEFINFORM_);
				 DBMS_OUTPUT.PUT_LINE('Nouvelle relation Candidat/Formation inseree.');
			 END IF;
		 END IF;
	 END;
	/
	
-- Procédure d'insertion générale	
CREATE OR REPLACE PROCEDURE INSERT_(
	-- Information CV
	 NOMCV_ VARCHAR2,
	 DESCRIPTIFCV_ VARCHAR2,
	 POSTERECHERCHER_ VARCHAR2,
	 TYPEPOSTE_ VARCHAR2,
	 DISPONIBILITE_ DATE,
	 ADMIS_ VARCHAR2,
	 DATETRANSMISSION_ DATE,
	 PHOTO_ VARCHAR2,
	-- Informations adresses
	 NUMADR_ VARCHAR2,
	 LOCALITEADR_ VARCHAR2,
	 NOMRUEADR_ VARCHAR2,
	 CPADR_ VARCHAR2,
	 VILLEADR_ VARCHAR2,
	 PAYSADR_ VARCHAR2,
	 CONTINENTADR_ VARCHAR2,
	-- Informations candidats
	 NOMCAN_ VARCHAR2,
	 PRENOMCAN_ VARCHAR2,
	 SEXE_ CHAR,
	 AGE_ NUMBER,
	 DATENAISSANCE_ DATE,
	 MAILCAN_ VARCHAR2,
	 NATIONALITE_ VARCHAR2,
	 TELCAN_ VARCHAR2,
	 -- Informations Permis
	 LIST_PERMIS_ VARCHAR2,
	 -- Informations Diplome
	 LIST_DIPLOMES_ VARCHAR2,
	 -- Informations Sites/Réseaux
	 LIST_SITES_RES_ VARCHAR2,
	 -- Informations centres intérêts,
	 LIST_CENT_INT_ VARCHAR2,
	 -- Informations compétences
	 LIST_CPT_ VARCHAR2,
	 -- Informations langues
	 LIST_LANGUES_ VARCHAR2,
	 -- Informations formations
	 LIST_FORMATIONS_ VARCHAR2,
	 -- Informations expériences
	 LIST_EXPERIENCES_ VARCHAR2
	 ) AUTHID CURRENT_USER AS 
	
	-- ID renvoyé via les procédures
	 IDCV_ VARCHAR2(150);
	 IDADR_ VARCHAR2(150);
	 IDADRETASCO_ VARCHAR2(150);
	 IDCAN_ VARCHAR2(150);
	 IDETASCOFORM_ VARCHAR2(150);
	 IDENTEXP_ VARCHAR2(150);
	 IDFORM_ VARCHAR2(150);
	 IDADRENT_ VARCHAR2(150);
	 
	-- Variable de boucles
	 nb_element NUMBER(5);
	 
	-- Variable de gestion
	 LIST_PERMIS_NORM VARCHAR2(20000) := LIST_PERMIS_;
	 LIST_CPT_NORM VARCHAR2(20000) := LIST_CPT_;
	 LIST_LANG_NORM VARCHAR2(20000) := LIST_LANGUES_;
	 LIST_SITRES_NORM VARCHAR2(20000) := LIST_SITES_RES_;
	 LIST_CTRINT_NORM VARCHAR2(20000) := LIST_CENT_INT_;
	 LIST_FORMATIONS_NORM VARCHAR2(20000) := LIST_FORMATIONS_;
	 LIST_EXPERIENCES_NORM VARCHAR2(20000) := LIST_EXPERIENCES_;


	 permis VARCHAR2(2000);
	 couple_cpt_cat VARCHAR2(2000);
	 competence VARCHAR2(2000);
	 categorie VARCHAR2(2000);
	 langue VARCHAR2(2000);
	 niveau VARCHAR2(2000);
	 site_res VARCHAR2(2000);
	 centre_interet VARCHAR2(2000);
	 formation VARCHAR2(2000);
	 niveau_for VARCHAR2(2000);
	 specialite VARCHAR2(2000);
	 eta_sco VARCHAR2(2000);
	 dateDeb VARCHAR2(2000);
	 dateFin VARCHAR2(2000);
	 numAdr VARCHAR2(2000); 
	 typeVoie VARCHAR2(2000); 
	 nomRue VARCHAR2(2000); 
	 cp VARCHAR2(2000);
	 ville VARCHAR2(2000); 
	 pays VARCHAR2(2000);
	 continent VARCHAR2(2000);
	 telEtaSco VARCHAR2(2000);
	 experience VARCHAR2(2000);
	 poste_exp VARCHAR2(2000);
	 entreprise_exp VARCHAR2(2000);
	 typeContrat_exp VARCHAR2(2000);
	 dateDeb_exp VARCHAR2(2000);
	 dateFin_exp VARCHAR2(2000);
	 description_exp VARCHAR2(2000);

	 	 
	 BEGIN
		 INSERT_ADRESSES(NUMADR_, LOCALITEADR_, NOMRUEADR_, CPADR_, VILLEADR_, PAYSADR_, CONTINENTADR_, IDADR_);
		 INSERT_CANDIDATS(IDADR_, NOMCAN_, PRENOMCAN_, SEXE_, AGE_, DATENAISSANCE_, MAILCAN_, NATIONALITE_, TELCAN_, IDCAN_);
		 INSERT_CV(IDCAN_, NOMCV_, DESCRIPTIFCV_, POSTERECHERCHER_, TYPEPOSTE_, DISPONIBILITE_, ADMIS_, DATETRANSMISSION_, PHOTO_, IDCV_);
		 
		-- Insertion de permis
		-- Les permis sont de la forme [P1, P2, ...]
		 IF LIST_PERMIS_NORM IS NOT NULL THEN
			 LIST_PERMIS_NORM :=  REPLACE(LIST_PERMIS_NORM,' ',''); 
			 LIST_PERMIS_NORM :=  REPLACE(LIST_PERMIS_NORM,'[',''); 
			 LIST_PERMIS_NORM :=  REPLACE(LIST_PERMIS_NORM,']',''); 
			 nb_element := LENGTH(LIST_PERMIS_NORM) - LENGTH(REPLACE(LIST_PERMIS_NORM, ',', '')) + 1;
			 FOR cpt IN 1..nb_element LOOP
				 permis := TRIM(SPLIT(LIST_PERMIS_NORM, cpt, ','));
				 INSERT_OBTENTIONPERMIS(permis, IDCAN_, NULL);
			 END LOOP;
		 END IF;
		 
		-- Insertion de compétences
		-- Les compétences sont de la forme [(CPT1; CAT1), (CPT2; CAT2), ...]
		 IF LIST_CPT_NORM IS NOT NULL THEN
			 LIST_CPT_NORM :=  REPLACE(LIST_CPT_NORM,'[',''); 
			 LIST_CPT_NORM :=  REPLACE(LIST_CPT_NORM,']',''); 
			 nb_element := LENGTH(LIST_CPT_NORM) - LENGTH(REPLACE(LIST_CPT_NORM, ',', '')) + 1;
			 FOR cpt IN 1..nb_element LOOP
				 couple_cpt_cat := SPLIT(LIST_CPT_NORM, cpt, ',');
				 couple_cpt_cat := REPLACE(couple_cpt_cat,'(',''); 
				 couple_cpt_cat := REPLACE(couple_cpt_cat,')','');
				 competence := TRIM(SPLIT(couple_cpt_cat, 1, ';'));
				 categorie := TRIM(SPLIT(couple_cpt_cat, 2, ';'));
				 IF competence = 'NULL' THEN competence := NULL; END IF;
				 IF categorie = 'NULL' THEN categorie := NULL; END IF;
				 INSERT_RELATION_COMP_CAN(competence, categorie, IDCAN_);
			 END LOOP;
		 END IF;
		 
		-- Insertion de langues
		-- Les langues sont de la forme [(LANG1; NIV1), (LANG2; NIV), ...]
		 IF LIST_LANG_NORM IS NOT NULL THEN
			 LIST_LANG_NORM :=  REPLACE(LIST_LANG_NORM,'[',''); 
			 LIST_LANG_NORM :=  REPLACE(LIST_LANG_NORM,']',''); 
			 nb_element := LENGTH(LIST_LANG_NORM) - LENGTH(REPLACE(LIST_LANG_NORM, ',', '')) + 1;
			 FOR cpt IN 1..nb_element LOOP
				 couple_cpt_cat := SPLIT(LIST_LANG_NORM, cpt, ',');
				 couple_cpt_cat := REPLACE(couple_cpt_cat,'(',''); 
				 couple_cpt_cat := REPLACE(couple_cpt_cat,')','');
				 langue := TRIM(SPLIT(couple_cpt_cat, 1, ';'));
				 niveau := TRIM(SPLIT(couple_cpt_cat, 2, ';'));
				 IF langue = 'NULL' THEN langue := NULL; END IF;
				 IF niveau = 'NULL' THEN niveau := NULL; END IF;
				 INSERT_RELATION_LANG_CAN(langue, IDCAN_, niveau);
			 END LOOP;
		 END IF;
		 
		-- Insertion de sites/réseaux
		-- Les sites/réseaux sont de la forme [S1, S2, ...]
		 IF LIST_SITRES_NORM IS NOT NULL THEN
			 LIST_SITRES_NORM :=  REPLACE(LIST_SITRES_NORM,' ',''); 
			 LIST_SITRES_NORM :=  REPLACE(LIST_SITRES_NORM,'[',''); 
			 LIST_SITRES_NORM :=  REPLACE(LIST_SITRES_NORM,']',''); 
			 nb_element := LENGTH(LIST_SITRES_NORM) - LENGTH(REPLACE(LIST_SITRES_NORM, ',', '')) + 1;
			 FOR cpt IN 1..nb_element LOOP
				 site_res := TRIM(SPLIT(LIST_SITRES_NORM, cpt, ','));
				 INSERT_SITES_RESEAUX(IDCAN_, site_res);
			 END LOOP;
		 END IF;

		-- Insertion de centres intérêt
		-- Les centres d'intérêt sont de la forme [C1, C2, ...]
		 IF LIST_CTRINT_NORM IS NOT NULL THEN
			 LIST_CTRINT_NORM :=  REPLACE(LIST_CTRINT_NORM,'[',''); 
			 LIST_CTRINT_NORM :=  REPLACE(LIST_CTRINT_NORM,']',''); 
			 nb_element := LENGTH(LIST_CTRINT_NORM) - LENGTH(REPLACE(LIST_CTRINT_NORM, ',', '')) + 1;
			 FOR cpt IN 1..nb_element LOOP
				 centre_interet := TRIM(SPLIT(LIST_CTRINT_NORM, cpt, ','));
				 INSERT_RELATION_CENTINT_CAN(centre_interet, IDCAN_);
			 END LOOP;
		 END IF;
		 
		-- Insertion de formations
		-- Les formations sont de la forme [(Niveau; Specialite; EtablissementScolaire; DateDeb; DateFin; NumAdr ; TypeVoie; NomRue; CP; Ville; Pays; Continent; TelEtaSco) , ... ]
		 IF LIST_FORMATIONS_NORM IS NOT NULL THEN
			 LIST_FORMATIONS_NORM :=  REPLACE(LIST_FORMATIONS_NORM,'[',''); 
			 LIST_FORMATIONS_NORM :=  REPLACE(LIST_FORMATIONS_NORM,']',''); 
			 nb_element := LENGTH(LIST_FORMATIONS_NORM) - LENGTH(REPLACE(LIST_FORMATIONS_NORM, ',', '')) + 1;
			 FOR cpt IN 1..nb_element LOOP
				 formation := SPLIT(LIST_FORMATIONS_NORM, cpt, ',');
				 formation := REPLACE(formation,'(',''); 
				 formation := REPLACE(formation,')','');
				 niveau_for := TRIM(SPLIT(formation, 1, ';'));
				 specialite := TRIM(SPLIT(formation, 2, ';'));
				 eta_sco := TRIM(SPLIT(formation, 3, ';'));
				 dateDeb := TRIM(SPLIT(formation, 4, ';'));
				 dateFin := TRIM(SPLIT(formation, 5, ';'));
				 numAdr := TRIM(SPLIT(formation, 6, ';'));
				 typeVoie := TRIM(SPLIT(formation, 7, ';')); 
				 nomRue := TRIM(SPLIT(formation, 8, ';')); 
				 cp := TRIM(SPLIT(formation, 9, ';')); 
				 ville := TRIM(SPLIT(formation, 10, ';')); 
				 pays := TRIM(SPLIT(formation, 11, ';')); 
				 continent := TRIM(SPLIT(formation, 12, ';'));
				 telEtaSco := TRIM(SPLIT(formation, 13, ';'));

				 
				 IF niveau_for = 'NULL' THEN niveau_for := NULL; END IF;
				 IF specialite = 'NULL' THEN specialite := NULL; END IF;
				 IF eta_sco = 'NULL' THEN eta_sco := NULL; END IF;
				 IF dateDeb = 'NULL' THEN dateDeb := NULL; END IF;
				 IF dateFin = 'NULL' THEN dateFin := NULL; END IF;
				 IF numAdr = 'NULL' THEN numAdr := NULL; END IF;
				 IF typeVoie = 'NULL' THEN typeVoie := NULL; END IF;
				 IF nomRue = 'NULL' THEN nomRue := NULL; END IF;
				 IF cp = 'NULL' THEN cp := NULL; END IF;
				 IF ville = 'NULL' THEN ville := NULL; END IF;
				 IF pays = 'NULL' THEN pays := NULL; END IF;
				 IF continent = 'NULL' THEN continent := NULL; END IF;
				 IF telEtaSco = 'NULL' THEN telEtaSco := NULL; END IF;

				 INSERT_ADRESSES(numAdr, typeVoie, nomRue, cp, ville, pays, continent, IDADRETASCO_);
				 INSERT_ETABLISSEMENTSCOLAIRES(IDADRETASCO_, eta_sco, telEtaSco, IDETASCOFORM_);
				 INSERT_FORMATIONS(IDETASCOFORM_, niveau_for, specialite, IDFORM_);
				 INSERT_SUIT_FORMATIONS(IDFORM_, IDCAN_, dateDeb, dateFin);
			 END LOOP;
		 END IF;
		
		-- Insertion d'expériences
		-- Les expériences sont de la forme [(poste; typeContrat; entreprise; DateDeb; DateFin; DescriptifExp), ... ]
		 IF LIST_EXPERIENCES_NORM IS NOT NULL THEN
			 LIST_EXPERIENCES_NORM := REPLACE(LIST_EXPERIENCES_NORM,'[',''); 
			 LIST_EXPERIENCES_NORM := REPLACE(LIST_EXPERIENCES_NORM,']',''); 
			 nb_element := LENGTH(LIST_EXPERIENCES_NORM) - LENGTH(REPLACE(LIST_EXPERIENCES_NORM, ',', '')) + 1;
			 FOR cpt IN 1..nb_element LOOP
				 experience := SPLIT(LIST_EXPERIENCES_NORM, cpt, ',');
				 experience := REPLACE(experience,'(',''); 
				 experience := REPLACE(experience,')','');
				 poste_exp := TRIM(SPLIT(experience, 1, ';'));
				 typeContrat_exp := TRIM(SPLIT(experience, 2, ';'));
				 entreprise_exp := TRIM(SPLIT(experience, 3, ';'));
				 dateDeb_exp := TRIM(SPLIT(experience, 4, ';'));
				 dateFin_exp := TRIM(SPLIT(experience, 5, ';'));
				 description_exp := TRIM(SPLIT(experience, 6, ';'));
				 numAdr := TRIM(SPLIT(experience, 7, ';'));
				 typeVoie := TRIM(SPLIT(experience, 8, ';')); 
				 nomRue := TRIM(SPLIT(experience, 9, ';')); 
				 cp := TRIM(SPLIT(experience, 10, ';')); 
				 ville := TRIM(SPLIT(experience, 11, ';')); 
				 pays := TRIM(SPLIT(experience, 12, ';')); 
				 continent := TRIM(SPLIT(experience, 13, ';'));
				 
				 IF poste_exp = 'NULL' THEN poste_exp := NULL; END IF;
				 IF typeContrat_exp = 'NULL' THEN typeContrat_exp := NULL; END IF;
				 IF entreprise_exp = 'NULL' THEN entreprise_exp := NULL; END IF;
				 IF dateDeb_exp = 'NULL' THEN dateDeb_exp := NULL; END IF;
				 IF dateFin_exp = 'NULL' THEN dateFin_exp := NULL; END IF;
				 IF description_exp = 'NULL' THEN description_exp := NULL; END IF;
				 IF numAdr = 'NULL' THEN numAdr := NULL; END IF;
				 IF typeVoie = 'NULL' THEN typeVoie := NULL; END IF;
				 IF nomRue = 'NULL' THEN nomRue := NULL; END IF;
				 IF cp = 'NULL' THEN cp := NULL; END IF;
				 IF ville = 'NULL' THEN ville := NULL; END IF;
				 IF pays = 'NULL' THEN pays := NULL; END IF;
				 IF continent = 'NULL' THEN continent := NULL; END IF;

				 INSERT_ADRESSES(numAdr, typeVoie, nomRue, cp, ville, pays, continent, IDADRENT_);
				 INSERT_ENTREPRISE(IDADRENT_, entreprise_exp, NULL, NULL, IDENTEXP_);
				 INSERT_EXPERIENCE(IDENTEXP_, IDCAN_, poste_exp, typeContrat_exp, description_exp, dateDeb_exp, dateFin_exp);
			 END LOOP;
		 END IF;
	 END;
	/
	
CREATE OR REPLACE FUNCTION Split ( PC$Chaine IN VARCHAR2, PN$Pos IN PLS_INTEGER, PC$Sep IN VARCHAR2 DEFAULT ',' ) RETURN VARCHAR2 IS
	 LC$Chaine VARCHAR2(32767) := PC$Sep || PC$Chaine ;
	 LI$I  PLS_INTEGER ;
	 LI$I2 PLS_INTEGER ;
	 BEGIN
	    -- On récupère la position de l'occurence qu'on cherche dans la chaine 
		 LI$I := INSTR( LC$Chaine, PC$Sep, 1, PN$Pos ) ;
		 IF LI$I > 0 THEN
		    --On récupère la position à la position suivante 
			 LI$I2 := INSTR( LC$Chaine, PC$Sep, 1, PN$Pos + 1) ;
			--Si c'est 0 c'est qu'on est à la fin de la chaine, on récupère la longeur de la chaine +1 
			 IF LI$I2 = 0 THEN LI$I2 := LENGTH( LC$Chaine ) + 1 ; END IF ;
			-- On renvoie la chaine se trouvant à la position 1 jusqu'à la position POS2 - POS1 -1
			 RETURN( SUBSTR( LC$Chaine, LI$I+1, LI$I2 - LI$I-1 ) ) ;
		 ELSE
			 RETURN NULL ;
		 END IF ;
	 END;
	/


	